# -*- coding: utf-8 -*-
"""QR Project 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l7m1m7-5GerA_k4VdMb17RmB8MvXITRB

#Importing Libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as st
from scipy import stats

from google.colab import files
import io
import warnings
warnings.filterwarnings('ignore')

"""#Compare income of workers with different education levels by age

##Importing Dataset
"""

url = 'https://github.com/ddutjnrevenge-universe/QR-Project-2/blob/main/datareg.xlsx?raw=true'
dataReg = pd.read_excel(url)

dataReg

sex = dataReg.HHSEX
age = dataReg.AGE
edu = dataReg.EDUC
income = dataReg.INCOME/100000 # unit of income now is $100,000
wealth = dataReg.NETWORTH/100000 # unit of wealth is $100,000
dataReg

"""##Create 2D and 3D charts and use them to discuss the dynamics of inequality

###Define Age Groups using function
"""

def age_group(x):
    x = int(x)
    x = abs(x)
    if( x < 31 ):
        return "Below 30"
    if( 30 < x < 41 ):
        return "31-40"
    if( 40 < x < 51 ):
        return "41-50"
    if( 50 < x < 61 ):
        return "51-60"
    if( 60 < x < 71 ):
        return "61-70"
    else:
        return "Greater than 70"

dataReg['age_group'] = dataReg['AGE'].apply(age_group)
dataReg

"""###Edu > 11"""

#test=dataReg.iloc[:,3:6:2]
#test.age_group.value_counts()
test = dataReg[dataReg.EDUC >11]
test=test.iloc[:,3:6:2]
test.age_group.value_counts()

"""####2D - 3D Plotting"""

order_list = {'Below 30':1, '31-40':2, '41-50':3, '51-60':4, '61-70':5, 'Greater than 70':6} #create dictionaries for age groups
#2d plot
ax = plt.figure(figsize=(10,10))
for yo,order in order_list.items():
  data = test.INCOME[test['age_group']==yo].dropna()
  q1=data.quantile(0.25)
  q3=data.quantile(0.75)
  iqr=q3-q1
  #whisker
  lw=q1-(1.5*iqr)
  uw=q3+(1.5*iqr)
  #clean data
  a = data[(data>lw)&(data<uw)]
  #fit skewed normal dist
  a_a, loc_a, scale_a = st.skewnorm.fit(a)
  #support wealth
  minincome= a.min()
  maxincome= a.max()
  supportincome = np.linspace(minincome,maxincome,1000)
  #pdf
  pdf = st.skewnorm.pdf(supportincome,a_a,loc_a,scale_a)
  plt.plot(supportincome, pdf,label='%s' %yo)
plt.legend()
plt.xlabel('Income', color='brown', fontsize=15)
plt.ylabel('Probability Density Function', color='brown', fontsize=15)
plt.title('Income Inequality by Age Groups', fontsize=20, color='steelblue')
plt.show()

#3d plotting
dens = plt.figure(figsize=(15,15)).add_subplot(projection='3d')
for yo,order in order_list.items():
  data = test.INCOME[test['age_group']==yo].dropna()
  q1=data.quantile(0.25)
  q3=data.quantile(0.75)
  iqr=q3-q1
  #whisker
  lw=q1-(1.5*iqr)
  uw=q3+(1.5*iqr)
  #clean data
  a = data[(data>lw)&(data<uw)]
  #fit skewed normal dist
  a_a, loc_a, scale_a = st.skewnorm.fit(a)
  #support wealth
  minincome= a.min()
  maxincome= a.max()
  supportincome = np.linspace(minincome,maxincome,1000)
  #pdf
  pdf = st.skewnorm.pdf(supportincome,a_a,loc_a,scale_a)
  #plot
  dens.set_xticks(ticks=[1,2,3,4,5,6],labels=['Below 30', '31-40', '41-50', '51-60', '61-70', 'Greater than 70'])
  plt.plot(order*np.ones(len(supportincome)), supportincome, pdf, linewidth=3)
dens.set_xlabel('Age Group', color='brown', fontsize=12)
dens.set_ylabel('Income', color='brown',fontsize=12)
dens.set_zlabel('PDF',color='brown',fontsize=12)
dens.set_title('      Income Inequality by Age Groups      ', loc='center', fontsize=30, color = 'steelblue')
plt.show()

"""####Confidence Interval"""

u50 = dataReg[(dataReg.AGE < 50) & (dataReg.EDUC > 11)].INCOME
o50 = dataReg[(dataReg.AGE > 50) & (dataReg.EDUC > 11)].INCOME

plt.figure(figsize=(10,6))
plt.boxplot(u50, vert = False)
q1_u50, q3_u50 = u50.quantile([0.25,0.75])
low_u50 = q1_u50 - 1.5*(q3_u50 - q1_u50)
upp_u50 = q3_u50 + 1.5*(q3_u50 - q1_u50)
u50 = u50[(u50<=upp_u50)&(u50>=low_u50)]

plt.figure(figsize=(10,6))
plt.boxplot(o50, vert = False)
q1_o50, q3_o50 = o50.quantile([0.25,0.75])
low_o50 = q1_o50 - 1.5*(q3_o50 - q1_o50)
upp_o50 = q3_o50 + 1.5*(q3_o50 - q1_o50)
o50 = o50[(o50<=upp_o50)&(o50>=low_o50)]

plt.figure(figsize=(10,6))
plt.boxplot ([u50, o50], labels = ["Workers under 50", "Workers over 50"], vert = False)
plt.show()

ciu50 = st.norm.interval(0.95, loc=u50.mean(),scale=u50.sem())
ciu50

cio50 = st.norm.interval(0.95, loc=o50.mean(),scale=o50.sem())
cio50

plt.figure(figsize=(6,6))
plt.bar(1, u50.mean(), width = 0.1, capsize=10, yerr = (ciu50[1]-ciu50[0])/2)
plt.bar(1.15, o50.mean(), width = 0.1, capsize=10, yerr = (cio50[1]-cio50[0])/2)
plt.xticks([1,1.15],['Under 50','Over 50'])
plt.show()

"""####p-value"""

st.shapiro(u50)

st.shapiro(o50)

st.ttest_ind(u50,o50)

"""###Edu < 11

#####2d 3d
"""

test1 = dataReg[dataReg.EDUC <11]
test1 =test1.iloc[:,3:6:2]
test1.age_group.value_counts()

order_list = {'Below 30':1, '31-40':2, '41-50':3, '51-60':4, '61-70':5, 'Greater than 70':6} #create dictionaries for age groups
#2d plot
ax = plt.figure(figsize=(10,10))
for yo,order in order_list.items():
  data = test1.INCOME[test1['age_group']==yo].dropna()
  q1=data.quantile(0.25)
  q3=data.quantile(0.75)
  iqr=q3-q1
  #whisker
  lw=q1-(1.5*iqr)
  uw=q3+(1.5*iqr)
  #clean data
  a = data[(data>lw)&(data<uw)]
  #fit skewed normal dist
  a_a, loc_a, scale_a = st.skewnorm.fit(a)
  #support wealth
  minincome= a.min()
  maxincome= a.max()
  supportincome = np.linspace(minincome,maxincome,1000)
  #pdf
  pdf = st.skewnorm.pdf(supportincome,a_a,loc_a,scale_a)
  plt.plot(supportincome, pdf,label='%s' %yo)
plt.legend()
plt.xlabel('Income', color='brown', fontsize=15)
plt.ylabel('Probability Density Function', color='brown', fontsize=15)
plt.title('Income Inequality by Age Groups', fontsize=20, color='steelblue')
plt.show()

#3d plotting
dens = plt.figure(figsize=(15,15)).add_subplot(projection='3d')
for yo,order in order_list.items():
  data = test1.INCOME[test1['age_group']==yo].dropna()
  q1=data.quantile(0.25)
  q3=data.quantile(0.75)
  iqr=q3-q1
  #whisker
  lw=q1-(1.5*iqr)
  uw=q3+(1.5*iqr)
  #clean data
  a = data[(data>lw)&(data<uw)]
  #fit skewed normal dist
  a_a, loc_a, scale_a = st.skewnorm.fit(a)
  #support wealth
  minincome= a.min()
  maxincome= a.max()
  supportincome = np.linspace(minincome,maxincome,1000)
  #pdf
  pdf = st.skewnorm.pdf(supportincome,a_a,loc_a,scale_a)
  #plot
  dens.set_xticks(ticks=[1,2,3,4,5,6],labels=['Below 30', '31-40', '41-50', '51-60', '61-70', 'Greater than 70'])
  plt.plot(order*np.ones(len(supportincome)), supportincome, pdf, linewidth=3)
dens.set_xlabel('Age Group', color='brown', fontsize=12)
dens.set_ylabel('Income', color='brown',fontsize=12)
dens.set_zlabel('PDF',color='brown',fontsize=12)
dens.set_title('      Income Inequality by Age Groups      ', loc='center', fontsize=20, color = 'steelblue')
plt.show()

"""####Confidence Interval"""

u50_u11 = dataReg[(dataReg.AGE < 50) & (dataReg.EDUC < 11)].INCOME
o50_u11 = dataReg[(dataReg.AGE > 50) & (dataReg.EDUC < 11)].INCOME

plt.figure(figsize=(10,6))
plt.boxplot(u50_u11, vert = False)
q1_u50_u11, q3_u50_u11 = u50_u11.quantile([0.25,0.75])
low_u50_u11 = q1_u50_u11 - 1.5*(q3_u50_u11 - q1_u50_u11)
upp_u50_u11 = q3_u50_u11 + 1.5*(q3_u50_u11 - q1_u50_u11)
u50_u11 = u50_u11[(u50_u11<=upp_u50_u11)&(u50_u11>=low_u50_u11)]

plt.figure(figsize=(10,6))
plt.boxplot(o50_u11, vert = False)
q1_o50_u11, q3_o50_u11 = o50_u11.quantile([0.25,0.75])
low_o50_u11 = q1_o50_u11 - 1.5*(q3_o50_u11 - q1_o50_u11)
upp_o50_u11 = q3_o50_u11 + 1.5*(q3_o50_u11 - q1_o50_u11)
o50_u11 = o50_u11[(o50_u11<=upp_o50_u11)&(o50_u11>=low_o50_u11)]

plt.figure(figsize=(10,6))
plt.boxplot ([u50_u11, o50_u11], labels = ["Workers under 50", "Workers over 50"], vert = False)
plt.show()

ciu50_u11 = st.norm.interval(0.95, loc=u50_u11.mean(),scale=u50_u11.sem())
ciu50_u11

cio50_u11 = st.norm.interval(0.95, loc=o50_u11.mean(),scale=o50_u11.sem())
cio50_u11

plt.figure(figsize=(6,6))
plt.bar(1, u50_u11.mean(), width = 0.1, capsize=10, yerr = (ciu50_u11[1]-ciu50_u11[0])/2)
plt.bar(1.15, o50_u11.mean(), width = 0.1, capsize=10, yerr = (cio50_u11[1]-cio50_u11[0])/2)
plt.xticks([1,1.15],['Under 50','Over 50'])
plt.show()

"""####p-value"""

st.shapiro(u50_u11)

st.shapiro(o50_u11)

st.ttest_ind(u50_u11,o50_u11)

"""###Combine"""

plt.figure(figsize=(6,6))
plt.bar(1, u50_u11.mean(), width = 0.1, capsize=10, yerr = (ciu50_u11[1]-ciu50_u11[0])/2, color='b', label='Age<50')
plt.bar(1.1, o50_u11.mean(), width = 0.1, capsize=10, yerr = (cio50_u11[1]-cio50_u11[0])/2, color='r')
plt.bar(1.3, u50.mean(), width = 0.1, capsize=10, yerr = (ciu50[1]-ciu50[0])/2, color='b')
plt.bar(1.4, o50.mean(), width = 0.1, capsize=10, yerr = (cio50[1]-cio50[0])/2, color='r', label='Age>50')
plt.xticks([1.05,1.35],['Edu Under 11','Edu Over 11'])
plt.ylabel('Income')
plt.title('Income Inequality of Workers by Age and Education', fontsize=15, color='g')
plt.legend()
plt.show()

"""#Absent Hours

##Importing Datasets
"""

url_age = 'https://raw.githubusercontent.com/ddutjnrevenge-universe/QR-Project-2/main/employee_addv.csv'
data2 = pd.read_csv(url_age)

data2

"""##Define Age Groups"""

def divide(x):
  x=int(x)
  x=abs(x)
  if( x < 31 ):
    return "Below 30"
  if( 30 < x < 41 ):
    return "31-40"
  if( 40 < x < 51 ):
    return "41-50"
  else:
    return "Greater than 50"

data2['age_group'] = data2['age'].apply(divide)
data2

hrs = data2.iloc[:, 5:9:3]
hrs.age_group.value_counts()

"""###2d - 3d Plot"""

age_list = {'Below 30':1, '31-40':2, '41-50':3, 'Greater than 50':4}

#2d plot
plot_2d = plt.figure(figsize=(10,10))
for yo,order in age_list.items():
  hrs_test = hrs.absent_hours[hrs['age_group']==yo].dropna()
  # q1_hrs =hours.quantile(0.25)
  # q3_hrs =hours.quantile(0.75)
  # iqr_hrs=q3_hrs-q1_hrs
  # #whisker
  # lw_hrs=q1_hrs-(1.5*iqr_hrs)
  # uw_hrs=q3_hrs+(1.5*iqr_hrs)
  # #clean data
  # hrs_test = hours[(hours>=lw_hrs)&(hours<=uw_hrs)]
  #fit skewed normal dist
  a_hrs, loc_hrs, scale_hrs = st.skewnorm.fit(hrs_test)
  #support wealth
  minhrs= hrs_test.min()
  maxhrs= hrs_test.max()
  supporthrs = np.linspace(minhrs,maxhrs,1000)
  #pdf
  pdf_hrs = st.skewnorm.pdf(supporthrs,a_hrs,loc_hrs,scale_hrs)
  plt.plot(supporthrs, pdf_hrs,label='%s' %yo, linewidth=1.5)
plt.legend()
plt.xlabel('Absent Hours', color='brown', fontsize=15)
plt.ylabel('Probability Density Function', color='brown', fontsize=15)
plt.title('Absent Hours Inequality by Age Groups', fontsize=20, color='steelblue')
plt.show()


#3d_plot
plot_3d = plt.figure(figsize=(15,15)).add_subplot(projection='3d')
for yo,order in age_list.items():
  hrs_test = hrs.absent_hours[hrs['age_group']==yo].dropna()
  # q1_hrs =hours.quantile(0.25)
  # q3_hrs =hours.quantile(0.75)
  # iqr_hrs=q3_hrs-q1_hrs
  # #whisker
  # lw_hrs=q1_hrs-(1.5*iqr_hrs)
  # uw_hrs=q3_hrs+(1.5*iqr_hrs)
  # #clean data
  # hrs_test = hours[(hours>=lw_hrs)&(hours<=uw_hrs)]
  #fit skewed normal dist
  a_hrs, loc_hrs, scale_hrs = st.skewnorm.fit(hrs_test)
  #support wealth
  minhrs= hrs_test.min()
  maxhrs= hrs_test.max()
  supporthrs = np.linspace(minhrs,maxhrs,1000)
  #pdf
  pdf_hrs = st.skewnorm.pdf(supporthrs,a_hrs,loc_hrs,scale_hrs)
  #plot
  plot_3d.set_xticks(ticks=[1,2,3,4],labels=['Below 30', '31-40', '41-50','Greater than 50'])
  plt.plot(order*np.ones(len(supporthrs)), supporthrs, pdf_hrs, linewidth=2)
plot_3d.set_xlabel('Age Group', color='brown', fontsize=12)
plot_3d.set_ylabel('Absent Hours', color='brown',fontsize=12)
plot_3d.set_zlabel('Probability Density Function',color='brown',fontsize=12)
plot_3d.set_title('      Absent Hours Inequality by Age Groups      ', loc='center', fontsize=25, color = 'steelblue')
plt.show()

"""###Scatter Plot & Linear Line"""

plt.scatter(data2.age, data2.absent_hours,s=9)
c, d = np.polyfit(data2.age,data2.absent_hours,1)
plt.plot(data2.age,c*data2.age+d,'k')
plt.xlabel('Age', color='g')
plt.ylabel('Absent Hours', color='g')
plt.title('Average Absent Hours in 1 year by age', fontsize=15, color='r')

plt.show()

"""#Promotion

##Importing Datasets
"""

url_promotion = 'https://github.com/ddutjnrevenge-universe/QR-Project-2/raw/main/Promotion-by-age.csv'
promotion = pd.read_csv(url_promotion)
promotion

promoted = promotion[promotion.is_promoted == 1].age
plt.show()

"""##Histogram & Curve Fitting"""

plt.figure(figsize=(10,6))
plt.hist(promoted, bins=np.arange(promoted.min(), promoted.max(),2), density=True, color='orange')
mu = promoted.mean()
sigma = promoted.std()
x_promoted =np.linspace(mu-3*sigma,mu+3*sigma+2,120)
a4, loc4, scale4 = st.skewnorm.fit(promoted)
plt.plot(x_promoted, st.skewnorm.pdf(x_promoted, a4, loc=loc4, scale=scale4), color='g')
plt.xlabel('Age', fontsize=15, color='b')
plt.ylabel('Probability Density Function', fontsize=15, color='b')
plt.title('Promotion Distribution by Age', fontsize=20, color='r')
plt.show()